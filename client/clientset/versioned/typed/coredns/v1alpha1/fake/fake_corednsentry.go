/*
 * Copyright 2021 Mandelsoft. All rights reserved.
 *  This file is licensed under the Apache Software License, v. 2 except as noted
 *  otherwise in the LICENSE file
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/mandelsoft/kubedyndns/apis/coredns/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCoreDNSEntries implements CoreDNSEntryInterface
type FakeCoreDNSEntries struct {
	Fake *FakeCorednsV1alpha1
	ns   string
}

var corednsentriesResource = schema.GroupVersionResource{Group: "coredns.mandelsoft.org", Version: "v1alpha1", Resource: "corednsentries"}

var corednsentriesKind = schema.GroupVersionKind{Group: "coredns.mandelsoft.org", Version: "v1alpha1", Kind: "CoreDNSEntry"}

// Get takes name of the coreDNSEntry, and returns the corresponding coreDNSEntry object, and an error if there is any.
func (c *FakeCoreDNSEntries) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.CoreDNSEntry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(corednsentriesResource, c.ns, name), &v1alpha1.CoreDNSEntry{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CoreDNSEntry), err
}

// List takes label and field selectors, and returns the list of CoreDNSEntries that match those selectors.
func (c *FakeCoreDNSEntries) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.CoreDNSEntryList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(corednsentriesResource, corednsentriesKind, c.ns, opts), &v1alpha1.CoreDNSEntryList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.CoreDNSEntryList{ListMeta: obj.(*v1alpha1.CoreDNSEntryList).ListMeta}
	for _, item := range obj.(*v1alpha1.CoreDNSEntryList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested coreDNSEntries.
func (c *FakeCoreDNSEntries) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(corednsentriesResource, c.ns, opts))

}

// Create takes the representation of a coreDNSEntry and creates it.  Returns the server's representation of the coreDNSEntry, and an error, if there is any.
func (c *FakeCoreDNSEntries) Create(ctx context.Context, coreDNSEntry *v1alpha1.CoreDNSEntry, opts v1.CreateOptions) (result *v1alpha1.CoreDNSEntry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(corednsentriesResource, c.ns, coreDNSEntry), &v1alpha1.CoreDNSEntry{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CoreDNSEntry), err
}

// Update takes the representation of a coreDNSEntry and updates it. Returns the server's representation of the coreDNSEntry, and an error, if there is any.
func (c *FakeCoreDNSEntries) Update(ctx context.Context, coreDNSEntry *v1alpha1.CoreDNSEntry, opts v1.UpdateOptions) (result *v1alpha1.CoreDNSEntry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(corednsentriesResource, c.ns, coreDNSEntry), &v1alpha1.CoreDNSEntry{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CoreDNSEntry), err
}

// Delete takes name of the coreDNSEntry and deletes it. Returns an error if one occurs.
func (c *FakeCoreDNSEntries) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(corednsentriesResource, c.ns, name), &v1alpha1.CoreDNSEntry{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCoreDNSEntries) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(corednsentriesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.CoreDNSEntryList{})
	return err
}

// Patch applies the patch and returns the patched coreDNSEntry.
func (c *FakeCoreDNSEntries) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.CoreDNSEntry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(corednsentriesResource, c.ns, name, pt, data, subresources...), &v1alpha1.CoreDNSEntry{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CoreDNSEntry), err
}
